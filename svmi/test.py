#
# import pandas as pd
# import numpy as np
# import pulseseq as ps
# import readfile as rf
#
# filename = './input/HyT-input.dat'	#config file
# params, values = rf.readpars(filename)
# # print(params)
# for i in range (len(params)):
# 	try:
# 		exec(params[i]+"=%s"%(values[i]))
# 	except (NameError, SyntaxError):
# 		exec(params[i]+"='%s'"%(values[i].strip()))
#
# # print(params)
# trigparams = []
# chs = 18
# for i in range(1, chs + 1):
# 	trigparams.append('ch%ib' % i)
# 	trigparams.append('ch%ie' % i)
# 	trigparams.append('ch%ipulse' % i)
# 	trigparams.append('ch%ifreq' % i)
# 	trigparams.append('ch%itrig' % i)
# 	trigparams.append('ch%icb' % i)
# 	for j in range(1, 3):
# 		trigparams.append('ch%it%i' % (i, j))
# 		trigparams.append('ch%iu%i' % (i, j))
#
# # print(trigparams)
# # def saveconfig(self, filename_in, filename_out):
# # 	infile = open(filename_in, "r")
# # 	outfile = open(filename_out, "w")
# #
# # 	# ~ READ OUT ALL GUI VARIABLES ! (TO DO!)---------------------------------------------------
# #
# # 	# ~ triggercontrol guiparams
# # 	trigparams = []
# # 	chs = 18
# # 	for i in range(1, chs + 1):
# # 		trigparams.append('ch%ib' % i)
# # 		trigparams.append('ch%ie' % i)
# # 		trigparams.append('ch%ipulse' % i)
# # 		trigparams.append('ch%ifreq' % i)
# # 		trigparams.append('ch%itrig' % i)
# # 		trigparams.append('ch%icb' % i)
# # 		for j in range(1, 3):
# # 			trigparams.append('ch%it%i' % (i, j))
# # 			trigparams.append('ch%iu%i' % (i, j))
# #
# # 	# chu1, chb, cht1, chu2, che, cht2, chfreq, chpulse, chcb, chtrig, t2jumpfile = self.readboard()
# # 	units = {'us': 1e6, 'ms': 1e3, 'ns': 1e9, 's': 1}
# # 	for i in range(len(chu1)):
# # 		cht1[i] = cht1[i] * units[chu1[i]]
# # 		cht2[i] = cht2[i] * units[chu2[i]]
# #
# # 	# rest of the gui changeable params in dictionary saveparams
# # 	saveparams = {}
# # 	saveparams['T2jumpfile'] = self.t2jumppath_lineEdit.text()
# #
# # 	while True:
# # 		line = infile.readline()
# # 		paramname = ''
# # 		value = ''
# # 		num = 0
# #
# # 		if line[0] != '#':
# # 			for char in line:
# # 				if char == '=':
# # 					break
# # 				paramname += char
# # 				num += 1
# #
# # 			paramname = paramname.strip()
# # 			value = eval(paramname)
# # 			if paramname in trigparams:
# # 				tstr = ''.join(i for i in paramname if not i.isdigit())
# # 				if paramname[-1].isdigit():
# # 					tstr += paramname[-1]
# #
# # 				tnum = [int(i) for i in paramname if i.isdigit()]
# # 				value = eval(tstr)[tnum[0] - 1]
# # 				try:
# # 					float(value)
# # 					value = "%.3f" % value
# # 				except (TypeError, ValueError):
# # 					value = value
# #
# # 			if paramname in saveparams:
# # 				value = saveparams[paramname]
# #
# # 			outfile.write('%s = %s\r\n' % (paramname, value))
# #
# # 		else:
# # 			outfile.write(line)
# #
# # 		if 'this is the end' in line:
# # 			break
# # 	return
# # lastindex = 17
# # ch_list=[i for i in range(lastindex+1)]
# #
# # print(ch_list)
# # output, msg = ps.pulses(units1, chno1, time1, units2, chno2, time2, freqs, pulsenature, checkboxvals,
# # 								posnegvals, scanchannel, relchannel, scantime, t2jumpfile)
#
# filename = './input/T2jump-backup.out'
# rowsskip = (0, 1, 2, 3, 4)  # skip unnecessary rows, s.t. files can be read in easily
# # rowsskip = ()
# data = pd.read_csv(filename, skiprows=rowsskip, delim_whitespace=True, header=None, on_bad_lines='skip')
# data = data.iloc[:-3]
# # print(data.astype())
# # print(data.drop(data[0] == '#'))
# # print(data)
# # print(data.dtypes)
# data = np.array(data)
# data = np.insert(data, 0, [1010, '0x0010', '!', 0], axis=0)
# # print(data.ctypes)
# #
# # # print(data)
# #
# # duration = []
# data = pd.DataFrame(data)
# # print(data.dtypes)
# # print(data[1])
# ns = 1e-9
# unit = ns
# #
# print()
# data[0]=data[0].astype(int)
# sign = 'H'
# # print(time.shape)
# # print(data.shape)
# # print(data[data[1] == '0x0010'][0]- data[0][0])
# if sign == 'V':
# 	time = (data[data[1] == '0x0010'][0] - data[0][0])
# 	# print(time.shape[0])
# 	# for i in range(time.shape[0]):
# 	# 	print(i,2 * i + 1,2*i)
# 	duration = np.array([(data[0][2 * i + 1] - data[0][2 * i]) for i in range(time.shape[0])])
# 	time = np.array(time) * unit
# 	duration = np.array(duration) * unit
#
# if sign == 'H':
# 	time = (data[data[1] == '0x0020'][0] - data[0][0])
# 	# print(time.shape[0])
# 	# for i in range(time.shape[0]):
# 	# 	print(i,2 * i + 2,2*i+1)
# 	duration = np.array([data[0][2 * i + 2] - data[0][2 * i + 1] for i in range(time.shape[0])])
# 	time = np.array(time) * unit
# 	duration = np.array(duration) * unit
# # print(len(time),len(duration))
# # print(time,duration)
# #
# key = ['1b001', '1e001', '4b001', '4e001', '6b001', '6e001', '6e001', \
# 	   '6b002', '6b002', '7b002', '6e002', '6b003', '6b003', '6e003', \
# 	   '6e003', '6b004', '6b004', '6e004', '6e004', '6b005', '6b005', \
# 	   '7b005', '6e005', '7e005', '6b006', '7b006', '6e006', '6b007', \
# 	   '6b007', '6e007', '6e007', '7e007', '6b008', '6e008', '6e008', \
# 	   '6b009', '6b009', '6e009', '6e009', '6b010', '6b010', '6e010', \
# 	   '6e010', '6b011', '6b011', '6e011', '6e011', '6b012', '6b012', \
# 	   '6e012', '6e012', '6b013', '7e012', '6e013', '6e013', '7e013', \
# 	   '6b014', '6e014', '6e014', '6b015', '6b015', '6e015', '6e015', \
# 	   '6b016', '6b016', '7b016', '6e016', '6b017', '6b017', '6e017', \
# 	   '6e017', '6b018', '7e017', '6e018', '7b018', '6b019', '7e018', \
# 	   '6e019', '7b019', '6b020', '7e019', '6e020', '7b020', '6b021', \
# 	   '6b021', '6e021', '6e021', '6b022', '6b022', '6e022', '6e022', \
# 	   '6b023', '7e022', '6e023', '6e023', '6b024', '6b024', '6e024', \
# 	   '6e024', '6b025', '6b025', '6e025', '6e025', '6b026', '6b026', \
# 	   '6e026', '6e026', '6b027', '6b027', '6e027', '6e027', '6b028', \
# 	   '6b028', '6e028', '6e028', '6b029', '6b029', '6e029', '6e029', \
# 	   '6b030', '6b030', '6e030', '6e030', '7e030', '6b031', '7b031', \
# 	   '6e031', '6b032', '6b032', '6e032', '6e032', '7e032', '6b033', \
# 	   '7b033', '6e033', '6b034', '6b034', '6e034', '7b034', '6b035', \
# 	   '6b035', '7b035', '6e035', '6b036', '6b036', '6e036', '7b036', \
# 	   '6b037', '7e036', '2b001', '2e001', '6e037', '6e037', '6b038', \
# 	   '6b038', '7b038', '6e038', '6b039', '6b039', '6e039', '7b039', \
# 	   '7e039', '6b040', '7b040', '6e040', '6b041', '7e040', '6e041', \
# 	   '7b041', '6b042', '7e041', '6e042', '7b042', '6b043', '6b043', \
# 	   '5b001', '3b001', '7b043', '6e043', '5e001', '3e001', '6b044', \
# 	   '6b044', '6e044', '7b044', '6b045', '7e044', '6e045', '6e045', \
# 	   '6b046', '6b046', '6e046', '6e046', '6b047', '6b047', '6e047', \
# 	   '7b047', '6b048', '6b048', '6e048', '6e048', '6b049', '6b049', \
# 	   '6e049', '7b049', '6b050', '7e049', '6e050', '7b050', '6b051', \
# 	   '6b051', '6e051', '6e051', '6b052', '6b052', '6e052', '6e052', \
# 	   '6b053', '6b053', '6e053', '6e053', '6b054', '7e053', '6e054', \
# 	   '6e054', '6b055', '6b055', '6e055', '6e055', '6b056', '6b056', \
# 	   '6e056', '6e056', '6b057', '6b057', '6e057', '7b057', '6b058', \
# 	   '6b058', '6e058', '6e058', '6b059', '7e058', '6e059', '6e059', \
# 	   '6b060', '6b060', '6e060', '6e060', '6b061', '6b061', '6e061', \
# 	   '7b061', '6b062', '7e061', '6e062', '6e062', '6b063', '6b063', \
# 	   '6e063', '6e063', '6b064', '6b064', '6e064', '7b064', '6b065', \
# 	   '6b065', '6e065', '6e065', '7e065', '6b066', '6e066', '6e066', \
# 	   '6b067', '7e066', '6e067', '6e067', '6b068', '7e067', '6e068', \
# 	   '7b068', '8b001', '7e068', '6b069', '7b069', '6e069', '6b070', \
# 	   '6b070', '7b070', '6e070', '7e070', '6b071', '6e071', '6e071', \
# 	   '6b072', '6b072', '7b072', '6e072', '8e001', '7e072', '6b073', \
# 	   '7b073', '6e073', '7e073', '6b074', '6e074', '6e074', '6b075', \
# 	   '6b075', '6e075', '6e075', '7e075']
# lastdig = 4
#
# # print(key[2][-lastdig+1:])
# print(len(events.values()))
# events = {'1b001': 0.00039999999999999996, '1e001': 0.0005, '4b001': 0.0005099999999999999, '4e001': 0.00052, '3b001': 0.00258, '3e001': 0.00259, '2b001': 0.0023, '2e001': 0.00231, '5b001': 0.002575, '5e001': 0.002585, '6b001': 0.000986, '6e001': 0.000996535, '6b002': 0.001012315, '6e002': 0.00102815, '6b003': 0.0010440349999999998, '6e003': 0.001059975, '6b004': 0.0010759699999999999, '6e004': 0.00109202, '6b005': 0.001108125, '6e005': 0.001124285, '6b006': 0.0011405, '6e006': 0.001156775, '6b007': 0.0011731049999999998, '6e007': 0.0011894949999999998, '6b008': 0.00120594, '6e008': 0.00122245, '6b009': 0.001239015, '6e009': 0.001255645, '6b010': 0.0012723349999999999, '6e010': 0.001289085, '6b011': 0.0013059, '6e011': 0.001322775, '6b012': 0.001339715, '6e012': 0.001356725, '6b013': 0.001373795, '6e013': 0.0013909349999999998, '6b014': 0.00140814, '6e014': 0.001425415, '6b015': 0.00144276, '6e015': 0.00146017, '6b016': 0.001477655, '6e016': 0.00149521, '6b017': 0.001512835, '6e017': 0.001530535, '6b018': 0.0015483099999999998, '6e018': 0.0015661599999999998, '6b019': 0.0015840849999999998, '6e019': 0.0016020849999999998, '6b020': 0.0016201649999999998, '6e020': 0.0016383249999999997, '6b021': 0.001656565, '6e021': 0.001674885, '6b022': 0.001693285, '6e022': 0.00171177, '6b023': 0.00173034, '6e023': 0.001749, '6b024': 0.0017677399999999998, '6e024': 0.00178657, '6b025': 0.0018054899999999999, '6e025': 0.0018245, '6b026': 0.001843605, '6e026': 0.0018628, '6b027': 0.0018820899999999999, '6e027': 0.001901475, '6b028': 0.00192096, '6e028': 0.00194054, '6b029': 0.001960225, '6e029': 0.00198001, '6b030': 0.0019998999999999998, '6e030': 0.00201989, '6b031': 0.002039995, '6e031': 0.0020602050000000003, '6b032': 0.0020805249999999997, '6e032': 0.002100955, '6b033': 0.0021215, '6e033': 0.002142165, '6b034': 0.002162945, '6e034': 0.002183845, '6b035': 0.0022048700000000003, '6e035': 0.0022260200000000004, '6b036': 0.002247295, '6e036': 0.002268695, '6b037': 0.00229023, '6e037': 0.0023119, '6b038': 0.002333705, '6e038': 0.0023556500000000004, '6b039': 0.0023777349999999997, '6e039': 0.0023999649999999996, '6b040': 0.0024223400000000003, '6e040': 0.0024448700000000005, '6b041': 0.0024675499999999998, '6e041': 0.00249039, '6b042': 0.002513385, '6e042': 0.002536545, '6b043': 0.002559875, '6e043': 0.00258337, '6b044': 0.0026070399999999997, '6e044': 0.00263089, '6b045': 0.002654925, '6e045': 0.00267914, '6b046': 0.00270355, '6e046': 0.002728155, '6b047': 0.00275296, '6e047': 0.00277797, '6b048': 0.00280319, '6e048': 0.002828625, '6b049': 0.00285428, '6e049': 0.0028801649999999996, '6b050': 0.0029062849999999998, '6e050': 0.00293264, '6b051': 0.002959245, '6e051': 0.0029861, '6b052': 0.00301322, '6e052': 0.003040605, '6b053': 0.00306827, '6e053': 0.0030962200000000002, '6b054': 0.003124465, '6e054': 0.00315301, '6b055': 0.00318187, '6e055': 0.00321106, '6b056': 0.00324058, '6e056': 0.00327045, '6b057': 0.00330068, '6e057': 0.003331285, '6b058': 0.003362275, '6e058': 0.00339367, '6b059': 0.00342548, '6e059': 0.00345773, '6b060': 0.003490435, '6e060': 0.003523615, '6b061': 0.00355729, '6e061': 0.0035914849999999997, '6b062': 0.00362622, '6e062': 0.00366153, '6b063': 0.0036974350000000002, '6e063': 0.003733975, '6b064': 0.003771175, '6e064': 0.003809085, '6b065': 0.003847735, '6e065': 0.003887175, '6b066': 0.003927460000000001, '6e066': 0.003968640000000001, '6b067': 0.00401078, '6e067': 0.004053950000000001, '6b068': 0.00409823, '6e068': 0.004143709999999999, '6b069': 0.004190495000000001, '6e069': 0.004238700000000001, '6b070': 0.004288465, '6e070': 0.004339955, '6b071': 0.004393360000000001, '6e071': 0.00444891, '6b072': 0.004506885, '6e072': 0.00456764, '6b073': 0.004631615, '6e073': 0.00469938, '6b074': 0.004771705, '6e074': 0.00484966, '6b075': 0.00493481, '6e075': 0.005029625, '7b001': 0.000996535, '7e001': 0.001012315, '7b002': 0.0010281499999999998, '7e002': 0.0010440349999999998, '7b003': 0.001059975, '7e003': 0.0010759699999999999, '7b004': 0.00109202, '7e004': 0.001108125, '7b005': 0.0011242849999999998, '7e005': 0.0011404999999999998, '7b006': 0.0011567749999999999, '7e006': 0.0011731049999999998, '7b007': 0.0011894949999999998, '7e007': 0.0012059399999999997, '7b008': 0.00122245, '7e008': 0.001239015, '7b009': 0.001255645, '7e009': 0.0012723349999999999, '7b010': 0.001289085, '7e010': 0.0013059, '7b011': 0.001322775, '7e011': 0.001339715, '7b012': 0.001356725, '7e012': 0.0013737950000000001, '7b013': 0.0013909349999999998, '7e013': 0.0014081399999999998, '7b014': 0.001425415, '7e014': 0.00144276, '7b015': 0.00146017, '7e015': 0.001477655, '7b016': 0.0014952099999999999, '7e016': 0.001512835, '7b017': 0.001530535, '7e017': 0.00154831, '7b018': 0.00156616, '7e018': 0.001584085, '7b019': 0.001602085, '7e019': 0.001620165, '7b020': 0.001638325, '7e020': 0.001656565, '7b021': 0.001674885, '7e021': 0.001693285, '7b022': 0.00171177, '7e022': 0.0017303400000000001, '7b023': 0.001749, '7e023': 0.0017677399999999998, '7b024': 0.00178657, '7e024': 0.0018054899999999999, '7b025': 0.0018245, '7e025': 0.001843605, '7b026': 0.0018628, '7e026': 0.0018820899999999999, '7b027': 0.001901475, '7e027': 0.00192096, '7b028': 0.00194054, '7e028': 0.001960225, '7b029': 0.00198001, '7e029': 0.0019998999999999998, '7b030': 0.00201989, '7e030': 0.0020399949999999997, '7b031': 0.002060205, '7e031': 0.0020805249999999997, '7b032': 0.002100955, '7e032': 0.0021214999999999997, '7b033': 0.0021421649999999997, '7e033': 0.002162945, '7b034': 0.0021838450000000002, '7e034': 0.0022048700000000003, '7b035': 0.00222602, '7e035': 0.002247295, '7b036': 0.0022686950000000003, '7e036': 0.0022902300000000003, '7b037': 0.0023119, '7e037': 0.002333705, '7b038': 0.00235565, '7e038': 0.0023777349999999997, '7b039': 0.002399965, '7e039': 0.00242234, '7b040': 0.00244487, '7e040': 0.00246755, '7b041': 0.0024903900000000003, '7e041': 0.0025133850000000004, '7b042': 0.0025365450000000003, '7e042': 0.002559875, '7b043': 0.0025833699999999998, '7e043': 0.0026070399999999997, '7b044': 0.0026308900000000003, '7e044': 0.0026549250000000003, '7b045': 0.00267914, '7e045': 0.00270355, '7b046': 0.002728155, '7e046': 0.00275296, '7b047': 0.0027779700000000003, '7e047': 0.00280319, '7b048': 0.002828625, '7e048': 0.00285428, '7b049': 0.002880165, '7e049': 0.002906285, '7b050': 0.0029326400000000002, '7e050': 0.002959245, '7b051': 0.0029861, '7e051': 0.00301322, '7b052': 0.003040605, '7e052': 0.00306827, '7b053': 0.0030962200000000002, '7e053': 0.0031244650000000003, '7b054': 0.00315301, '7e054': 0.00318187, '7b055': 0.00321106, '7e055': 0.00324058, '7b056': 0.00327045, '7e056': 0.00330068, '7b057': 0.0033312850000000002, '7e057': 0.003362275, '7b058': 0.00339367, '7e058': 0.0034254800000000003, '7b059': 0.00345773, '7e059': 0.003490435, '7b060': 0.003523615, '7e060': 0.00355729, '7b061': 0.003591485, '7e061': 0.0036262200000000003, '7b062': 0.00366153, '7e062': 0.0036974350000000002, '7b063': 0.003733975, '7e063': 0.003771175, '7b064': 0.0038090850000000002, '7e064': 0.003847735, '7b065': 0.003887175, '7e065': 0.00392746, '7b066': 0.003968640000000001, '7e066': 0.004010780000000001, '7b067': 0.004053950000000001, '7e067': 0.0040982300000000004, '7b068': 0.00414371, '7e068': 0.004190495, '7b069': 0.0042387, '7e069': 0.004288465, '7b070': 0.0043399549999999995, '7e070': 0.00439336, '7b071': 0.00444891, '7e071': 0.004506885, '7b072': 0.0045676399999999995, '7e072': 0.0046316149999999995, '7b073': 0.0046993799999999995, '7e073': 0.004771704999999999, '7b074': 0.00484966, '7e074': 0.00493481, '7b075': 0.005029625, '7e075': 0.00513843, '8b001': 0.0041863, '8e001': 0.004576299999999999}
# times=sorted(events.values())
# precision = 1e-9
# print(list(events.values())[len(events.values())-1])
#
# print(list(events.keys())[1])
#
# times=sorted(events.values())
#
# print(times)
# # print('%s%03i'%('1b',1))
# # print(indexes)
# # ch_list=[i for i in range(17+1)]
# # print(ch_list)
# # # for i in range(time.shape[0]):
# # # 	print(i)
# # events = {}
# # durations={}
# # for i in range(time.shape[0]):
# # 	events['%ib%03i' % (nextindex + 1, n)] = events['%s%03i' % (chno1[nextindex], 1)] + time1[nextindex] + (m - 1) * 1 / \
# # 											 freqs[nextindex] + time[i]
# # 	events['%ie%03i' % (nextindex + 1, n)] = events['%ib%03i' % (nextindex + 1, n)] + duration[i]
# # 	durations['%id%03i' % (nextindex + 1, n)] = duration[i]
# # 	n += 1
import numpy as np


input = {'1b01':0.1,'1e01':0.2,'1b02':0.3,'1e02':0.4,'1b03':0.5,'1e03':0.6,'2b01':0.2,'2e01':0.3,'2b02':0.4,'2e02':0.5,}

times=sorted(input.values())
print(np.argsort(list(input.values())))
# print(list(input.values()))
time = np.sort(list(input.values()))

print(np.array([0,1,2,3,4,5,6]))
print(time)
# for i in range(len(times)):
#     if times[i+1]==times[i]:


    # print(time)
# for time in times:
#     print(list(input.values()).index(time))
keyindexes=[list(input.values()).index(time) for time in times] #indexes in order
keys=[list(input.keys())[index] for index in keyindexes] # keys of these ordered indexes

# print(keys,keyindexes)
# indexnew = []
# n = len(list(input.values()))
# for i in range(n):
#     for j in range(0, n-i-1):
#         if list(input.values())[j] > list(input.values())[j+1]:
#             list(input.values())[j], list(input.values())[j+1] = list(input.values())[j+1], list(input.values())[j]
#             indexnew.append(i+1)
#         indexnew.append(i)
# print(indexnew)